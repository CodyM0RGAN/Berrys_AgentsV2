name: Build Template

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
        description: 'Name of the service to build'
      python_version:
        required: false
        type: string
        default: '3.10'
        description: 'Python version to use'
      working_directory:
        required: false
        type: string
        description: 'Directory containing the service code'
        default: 'services/${{ inputs.service_name }}'
      cache_dependencies:
        required: false
        type: boolean
        default: true
        description: 'Whether to cache dependencies'
    outputs:
      build_success:
        description: 'Whether the build was successful'
        value: ${{ jobs.build.outputs.build_success }}
      build_summary:
        description: 'Summary of the build'
        value: ${{ jobs.build.outputs.build_summary }}

jobs:
  build:
    name: Build ${{ inputs.service_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    outputs:
      build_success: ${{ steps.build_results.outputs.build_success }}
      build_summary: ${{ steps.build_summary.outputs.summary }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ inputs.working_directory }}/requirements.txt
            requirements.txt
            requirements-dev.txt
      
      - name: Install dependencies
        id: install_deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f ../requirements-dev.txt ]; then
            pip install -r ../requirements-dev.txt
          fi
          echo "install_exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Cache build artifacts
        if: ${{ inputs.cache_dependencies }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ inputs.working_directory }}/__pycache__
            ${{ inputs.working_directory }}/**/__pycache__
          key: ${{ runner.os }}-build-${{ inputs.service_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.service_name }}-
      
      - name: Verify imports
        id: verify_imports
        run: |
          echo "Verifying imports for ${{ inputs.service_name }}..."
          
          # Create a simple script to import the service modules
          cat > verify_imports.py << EOF
          import sys
          import os
          import importlib
          
          # Add the service directory to the path
          sys.path.insert(0, os.path.abspath('.'))
          
          # Try to import the service modules
          try:
              # Import src module if it exists
              if os.path.exists('src'):
                  for root, dirs, files in os.walk('src'):
                      for file in files:
                          if file.endswith('.py') and not file.startswith('__'):
                              module_path = os.path.join(root, file)
                              module_name = module_path.replace('/', '.').replace('\\\\', '.').replace('.py', '')
                              try:
                                  importlib.import_module(module_name)
                                  print(f"Successfully imported {module_name}")
                              except Exception as e:
                                  print(f"Error importing {module_name}: {e}")
                                  sys.exit(1)
              
              sys.exit(0)
          except Exception as e:
              print(f"Error: {e}")
              sys.exit(1)
          EOF
          
          # Run the script
          python verify_imports.py
          VERIFY_EXIT_CODE=$?
          echo "verify_exit_code=$VERIFY_EXIT_CODE" >> $GITHUB_OUTPUT
      
      - name: Build package
        id: build
        run: |
          echo "Building ${{ inputs.service_name }}..."
          
          # Check if setup.py exists
          if [ -f setup.py ]; then
            pip install -e .
            BUILD_EXIT_CODE=$?
          else
            # No setup.py, just check if the code is valid
            python -m compileall .
            BUILD_EXIT_CODE=$?
          fi
          
          echo "build_exit_code=$BUILD_EXIT_CODE" >> $GITHUB_OUTPUT
      
      - name: Process build results
        id: build_results
        if: always()
        run: |
          echo "Processing build results..."
          
          # Check if all build steps passed
          if [ "${{ steps.install_deps.outputs.install_exit_code }}" == "0" ] && \
             [ "${{ steps.verify_imports.outputs.verify_exit_code }}" == "0" ] && \
             [ "${{ steps.build.outputs.build_exit_code }}" == "0" ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "All build steps passed!"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "Some build steps failed!"
          fi
      
      - name: Generate build summary
        id: build_summary
        if: always()
        run: |
          echo "Generating build summary..."
          
          # Generate summary
          SUMMARY="Build summary for ${{ inputs.service_name }}:"
          SUMMARY="$SUMMARY\n- Dependencies: ${{ steps.install_deps.outputs.install_exit_code == '0' && 'Installed' || 'Failed' }}"
          SUMMARY="$SUMMARY\n- Imports: ${{ steps.verify_imports.outputs.verify_exit_code == '0' && 'Verified' || 'Failed' }}"
          SUMMARY="$SUMMARY\n- Build: ${{ steps.build.outputs.build_exit_code == '0' && 'Succeeded' || 'Failed' }}"
          SUMMARY="$SUMMARY\n- Overall: ${{ steps.build_results.outputs.build_success == 'true' && 'Succeeded' || 'Failed' }}"
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
