name: Build Template

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
        description: 'Name of the service to build'
      python_version:
        required: false
        type: string
        default: '3.10'
        description: 'Python version to use'
      working_directory:
        required: false
        type: string
        description: 'Directory containing the service code'
        default: 'services/${{ inputs.service_name }}'
    outputs:
      build_success:
        description: 'Whether the build was successful'
        value: ${{ jobs.build.outputs.build_success }}

jobs:
  build:
    name: Build ${{ inputs.service_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    outputs:
      build_success: ${{ steps.build_results.outputs.build_success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ inputs.working_directory }}/requirements.txt
            requirements.txt
            requirements-dev.txt
      
      - name: Install dependencies
        id: install_deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f ../requirements-dev.txt ]; then
            pip install -r ../requirements-dev.txt
          fi
      
      - name: Verify imports
        id: verify_imports
        run: |
          echo "Verifying imports for ${{ inputs.service_name }}..."
          
          # Create a simple script to verify imports
          cat > verify_imports.py << EOF
          import importlib
          import os
          import sys
          
          def verify_imports(directory):
              """Verify that all Python modules can be imported."""
              success = True
              errors = []
              
              for root, _, files in os.walk(directory):
                  for file in files:
                      if file.endswith('.py') and not file.startswith('test_'):
                          module_path = os.path.join(root, file)
                          module_name = module_path.replace('/', '.').replace('\\\\', '.').replace('.py', '')
                          module_name = module_name.replace('src.', '')
                          
                          try:
                              importlib.import_module(module_name)
                              print(f"Successfully imported {module_name}")
                          except ImportError as e:
                              success = False
                              errors.append(f"Failed to import {module_name}: {e}")
              
              return success, errors
          
          if __name__ == "__main__":
              success, errors = verify_imports("src")
              
              if not success:
                  print("Import verification failed:")
                  for error in errors:
                      print(f"  {error}")
                  sys.exit(1)
              
              print("All imports verified successfully!")
          EOF
          
          # Run the script if src directory exists
          if [ -d src ]; then
            python verify_imports.py
            VERIFY_EXIT_CODE=$?
            echo "verify_exit_code=$VERIFY_EXIT_CODE" >> $GITHUB_OUTPUT
          else
            echo "No src directory found. Skipping import verification."
            echo "verify_exit_code=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Process build results
        id: build_results
        if: always()
        run: |
          echo "Processing build results..."
          
          # Check if all steps succeeded
          if [ "${{ steps.install_deps.outcome }}" == "success" ] && \
             [ "${{ steps.verify_imports.outputs.verify_exit_code }}" == "0" ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "Build successful!"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "Build failed!"
          fi
