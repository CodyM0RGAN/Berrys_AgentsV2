name: API Gateway CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'services/api-gateway/**'
      - 'shared/utils/src/**'
      - '.github/workflows/api-gateway.yml'
      - '.github/workflows/templates/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/api-gateway/**'
      - 'shared/utils/src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - qa
          - production

jobs:
  build:
    uses: ./.github/workflows/templates/build.yml
    with:
      service_name: api-gateway
      python_version: '3.10'
  
  test:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.build_success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api-gateway/requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        run: |
          cd services/api-gateway
          pytest --cov=src --cov-report=xml
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: api-gateway-coverage-report
          path: services/api-gateway/coverage.xml
          
  deploy-dev:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/api-gateway/Dockerfile
          push: false
          tags: berrys-agents/api-gateway:dev
          cache-from: type=registry,ref=berrys-agents/api-gateway:buildcache
          cache-to: type=registry,ref=berrys-agents/api-gateway:buildcache,mode=max
          
      - name: Deploy to development environment
        run: echo "Deploying to development environment"
        # In a real scenario, this would include:
        # - Pushing to a container registry
        # - Updating Kubernetes manifests
        # - Applying the manifests to the cluster
    
  monitor-dev:
    needs: deploy-dev
    uses: ./.github/workflows/templates/monitoring.yml
    with:
      service_name: api-gateway
      environment: development
      deploy_url: http://localhost:8000  # This would be the actual URL in production
      verify_health: true
      verify_metrics: true
      verify_performance: true
    
  deploy-qa:
    needs: [monitor-dev]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qa'
    environment: qa
    steps:
      - name: Deploy to QA environment
        run: echo "Deploying to QA environment"
        
  monitor-qa:
    needs: deploy-qa
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qa'
    uses: ./.github/workflows/templates/monitoring.yml
    with:
      service_name: api-gateway
      environment: qa
      deploy_url: http://qa-api.example.com  # Replace with actual QA URL
      verify_health: true
      verify_metrics: true
      verify_performance: true
  
  deploy-prod:
    needs: [monitor-qa]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Deploy to production environment
        run: echo "Deploying to production environment"
  
  monitor-prod:
    needs: deploy-prod
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    uses: ./.github/workflows/templates/monitoring.yml
    with:
      service_name: api-gateway
      environment: production
      deploy_url: http://api.example.com  # Replace with actual production URL
      verify_health: true
      verify_metrics: true
      verify_performance: true
      enable_canary: true
      canary_url: http://canary-api.example.com  # Replace with actual canary URL
      production_url: http://api.example.com  # Replace with actual production URL
      performance_threshold: 1.2  # Allow 20% performance degradation
      monitor_duration: 300  # Monitor for 5 minutes
