# HashiCorp Vault configuration for production environment

server:
  # HA configuration
  ha:
    enabled: true
    replicas: 3
    
    # Specify the Raft configuration for HA
    raft:
      enabled: true
      config: |
        ui = true
        
        listener "tcp" {
          tls_disable = 0
          tls_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
          tls_key_file = "/vault/userconfig/vault-server-tls/tls.key"
          tls_client_ca_file = "/vault/userconfig/vault-server-tls/ca.crt"
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        
        storage "raft" {
          path = "/vault/data"
          
          retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
          }
          
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
          }
          
          retry_join {
            leader_api_addr = "https://vault-2.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-server-tls/tls.key"
          }
        }
        
        service_registration "kubernetes" {}
        
        seal "azurekeyvault" {
          tenant_id      = "${AZURE_TENANT_ID}"
          client_id      = "${AZURE_CLIENT_ID}"
          client_secret  = "${AZURE_CLIENT_SECRET}"
          vault_name     = "berrys-kv-prod"
          key_name       = "vault-unseal-key"
        }

  # TLS configuration
  extraVolumes:
    - type: secret
      name: vault-server-tls
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  # Resource limits
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi
      cpu: 500m
  
  # Persistence configuration
  dataStorage:
    enabled: true
    size: 10Gi
    storageClass: berrys-fast
    accessMode: ReadWriteOnce
  
  # Service configuration  
  service:
    enabled: true
    
    # Service for vault used by clients
    port: 8200
    targetPort: 8200
    
    # HA ports
    ports:
      http:
        port: 8200
        targetPort: 8200
        nodePort: null
      https:
        port: 8200
        targetPort: 8200
        nodePort: null
      internal:
        port: 8201
        targetPort: 8201
        nodePort: null
  
  # Vault UI
  ui:
    enabled: true
    serviceType: "ClusterIP"
    externalPort: 8200

# Injector configuration
injector:
  enabled: true
  replicas: 2
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  # Resource limits  
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 250m
  
  # Webhook configuration
  webhook:
    timeoutSeconds: 30
    failurePolicy: Fail
  
  # Agent configuration
  agentDefaults:
    cpuLimit: "100m"
    cpuRequest: "50m"
    memLimit: "128Mi"
    memRequest: "64Mi"
    template: "map"

# Vault Agent configuration
agent:
  enabled: true
  # Resource limits
  resources:
    requests:
      memory: 64Mi
      cpu: 50m
    limits:
      memory: 128Mi
      cpu: 100m

# Security hardening
global:
  tlsDisable: false
  psp:
    enable: true
  openshift: false

# Custom annotations/labels for better integration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8200"
  prometheus.io/path: "/v1/sys/metrics"

podLabels:
  app.kubernetes.io/part-of: "berrys-agents"
  environment: "production"
